package server;import java.util.Scanner;import server.commands.Command;import server.commands.CommandWords;/** * This class is part of the "World of Zuul" application. "World of Zuul" is a * very simple, text based adventure game. *  * This parser reads user input and tries to interpret it as an "Adventure" * command. Every time it is called it reads a line from the terminal and tries * to interpret the line as a two word command. It returns the command as an * object of class Command. * * The parser has a set of known command words. It checks user input against the * known commands, and if the input is not one of the known commands, it returns * a command object that is marked as an unknown command. *  * @author Tom Bjurenlind, Jan Rasmussen, Christer Sonesson, Emir Zivcic * @version 2018-02-28 */public class Parser {	private static final String packageName = "server.commands.";	private CommandWords commands; // holds all valid command words	private static Parser parser = null;	/**	 * Create a parser to read from the terminal window.	 */	private Parser() {		commands = new CommandWords();	}	/**	 * Singleton pattern, returns the one and only Parser object, if null -	 * create it first.	 * 	 * @return The parser	 */	public static Parser getParser() {		if (parser == null) {			parser = new Parser();		}		return parser;	}	/**	 * Factory method for Commands, uses dynamic class loading.	 * 	 * @param inputLine	 *            The full command to parse.	 * @return The next command from the user.	 */	@SuppressWarnings("rawtypes")	public Command getCommand(String inputLine) {		String word1 = null;		String word2 = null;		// Find up to two words on the line.		Scanner tokenizer = new Scanner(inputLine);		if (tokenizer.hasNext()) {			word1 = tokenizer.next().toLowerCase();			if (tokenizer.hasNext()) {				word2 = tokenizer.next().toLowerCase();			}		}		tokenizer.close();		word1 = new String(Character.toUpperCase(word1.charAt(0)) + word1.substring(1).toLowerCase());		Class commandClass;		// Attempt to construct the received Command.		try {			commandClass = Class.forName(packageName + word1);		} catch (ClassNotFoundException e) {			return null;		}		Command command = null;		try {			Object commandObject = commandClass.newInstance();			if (commandObject instanceof Command) {				command = (Command) commandObject;				command.setSecondWord(word2);			}		} catch (InstantiationException e) {			e.printStackTrace();		} catch (IllegalAccessException e) {			e.printStackTrace();		}		return command;	}	/**	 * Return a list of valid command words.	 * 	 * @return A list of all valid command words.	 */	public String showCommands() {		return commands.showAll();	}}